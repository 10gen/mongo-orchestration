########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 1800 # 30 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the submitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           # Install MongoDB
           wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
           echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
           sudo apt-get update
           sudo apt-get install -y mongodb-org

           export UPLOAD_BUCKET="${project}"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           UPLOAD_BUCKET: "$UPLOAD_BUCKET"
           PREPARE_SHELL: |
              set -o errexit
              export UPLOAD_BUCKET="$UPLOAD_BUCKET"
              export TMPDIR="/tmp/db"
              export PROJECT="${project}"
           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "upload mongo artifacts":
    - command: shell.exec
      params:
        script: |
          ${PREPARE_SHELL}
          find /tmp/db -name \*.log -exec sh -c 'x="{}"; mv $x $PWD/out_dir/$(basename $(dirname $x))_$(basename $x)' \;
          tar zcvf mongodb-logs.tar.gz -C out_dir/ .
          rm -rf out_dir
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-logs.tar.gz
        remote_file: ${UPLOAD_BUCKET}/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"

  "run tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          .venv/bin/python -m coverage run -m pytest $PYTEST_ARGS
          .venv/bin/python -m coverage report

  "install dependencies":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          python3 -m venv .venv
          .venv/bin/python -m pip install -e .
          .venv/bin/python -m pip install pytest coverage

pre:
  - func: "fetch source"
  - func: "install dependencies"

post:
  - func: "upload mongo artifacts"

tasks:
    - name: "test-other"
      commands:
        - func: "run tests"
          vars:
            PYTEST_ARGS: "--ignore=tests/test_replica_set.py --ignore=tests/test_replica_sets.py --ignore=tests/test_sharded_clusters.py"

    - name: "test-replica_set"
      commands:
        - func: "run tests"
          vars:
            PYTEST_ARGS: "tests/test_replica_set.py"

    - name: "test-replica_sets"
      commands:
        - func: "run tests"
          vars:
            PYTEST_ARGS: "tests/test_replica_sets.py"

    - name: "test-sharded_cluster"
      commands:
        - func: "run tests"
          vars:
            PYTEST_ARGS: "tests/test_sharded_clusters.py"

github_pr_aliases:
  - variant: "^.*$"
    task: "^.*$"

buildvariants:

- name: "tests-all"
  display_name: "All Tests"
  run_on:
     - ubuntu2004-small
  tasks:
     - name: "test-other"
     - name: "test-replica_set"
     - name: "test-replica_sets"
     - name: "test-sharded_cluster"
